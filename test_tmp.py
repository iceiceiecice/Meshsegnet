# # coding:utf8
# import visdom
# import time
# import numpy as np
# class Visualizer(object):
#     def __init__(self, env='default', **kwargs):
#         self.vis = visdom.Visdom(env=env, **kwargs)
#     def plot_many_stack(self, var_name, split_name, title_name, x, y):
#         '''
#         self.plot('loss',1.00)
#         '''
#
#         # print(x)
#         self.vis.line(X=np.array([x]), Y=np.array([y]),
#                       win=var_name,  # unicode
#                       opts=dict(legend=split_name,
#                                 title=title_name),
#                       update='append'
#                       )
import vedo
from vedo import *

# mesh = load(["C:\\dev\\MeshSegNet\\outputs\\final\\l_201911070015_predicted_refined.vtp"])
# # show(mesh)
# labels = mesh.getCellArray('Label').astype('int32').reshape(-1, 1)
# # print(mesh.getCellArray('Label')[:10])
# N = mesh.NCells()
# points = vtk2numpy(mesh.polydata().GetPoints().GetData())
# ids = vtk2numpy(mesh.polydata().GetPolys().GetData()).reshape((N, -1))[:,1:]
# cells = points[ids].reshape(N, 9).astype(dtype='float32')
# # print(ids[:10])
# # print(cells[:10])
# # print(len(labels))
# # print(len(cells))

"""Spline three points in space"""
from vedo import *
import numpy as np
# mesh = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\m202007270042_l.obj"])
# pts = ((-19.13256897,-5.91439223,-6.99503239),(-19.13325685,-5.76441226,-6.61276362),(-19.16129031,-5.65433201,-6.35131830),(-19.19294016,-5.57662412,-6.16974337),(-19.23358267,-5.50011899,-5.98998689),(-19.28344016,-5.42483095,-5.80903083),(-19.34688681,-5.34709447,-5.61373299),(-19.41021023,-5.28353941,-5.44303078),(-19.48537385,-5.22113829,-5.26196995),(-19.60401997,-5.13248023,-5.01820895),(-19.68997395,-5.06464363,-4.87147793),(-19.81642930,-4.95148257,-4.69485835),(-19.92576535,-4.84416763,-4.57130998),(-20.02860512,-4.73819119,-4.47484564),(-20.09555435,-4.66743374,-4.42109680),(-20.22022166,-4.53339206,-4.33840520),(-20.46547470,-4.26614064,-4.22788447),(-20.94129993,-3.75548725,-4.06844757),(-21.37233925,-3.34675384,-3.86342120),(-21.57190818,-3.19945034,-3.76004430),(-21.85449791,-3.05014516,-3.62035598),(-22.31123924,-2.95198345,-3.42088389),(-22.77307701,-2.97971249,-3.20667076),(-23.01831262,-3.03538001,-3.06474545),(-23.27256390,-3.12913634,-2.87942300),(-23.57773209,-3.36842823,-2.58472800),(-23.71359253,-3.65002608,-2.39143777),(-23.76583744,-3.85129254,-2.28562936),(-23.80313044,-4.01462441,-2.20031469),(-23.83292482,-4.13025715,-2.13420975),(-23.87993620,-4.26585858,-2.04235081),(-23.97739792,-4.42612267,-1.90734398),(-24.21347897,-4.57157317,-1.76558122),(-24.53927946,-4.61806338,-1.73187221),(-24.77500127,-4.62065231,-1.74143759),(-24.95488462,-4.61597963,-1.75524094),(-25.23613068,-4.60666625,-1.77677889),(-25.64078550,-4.60277379,-1.80175094),(-26.00615421,-4.62314470,-1.82516808),(-26.34819367,-4.67490152,-1.85599314),(-26.72326616,-4.76191062,-1.90301773),(-27.11373959,-4.86673906,-1.96633672),(-27.51581036,-4.96866017,-2.04671941),(-27.93176713,-5.06320620,-2.15075069),(-28.34211324,-5.16103513,-2.28503442),(-28.60411403,-5.23437724,-2.39367677),(-28.79568222,-5.29663000,-2.48700850),(-28.99462252,-5.37150368,-2.59852304),(-29.18223301,-5.45465042,-2.72005954),(-29.35438380,-5.54463012,-2.84900756),(-29.55503100,-5.66512890,-3.02629191),(-29.74649999,-5.79116883,-3.23116350),(-29.88498987,-5.88492121,-3.40809598),(-30.00831523,-5.96778559,-3.59143402),(-30.19739367,-6.08688740,-3.93576142),(-30.32063375,-6.15220977,-4.22249225),(-30.38239740,-6.17867417,-4.39894730),(-30.45016992,-6.19909569,-4.64104266),(-30.49341144,-6.20300390,-4.85069372),(-30.53797874,-6.18767269,-5.20798705),(-30.54869093,-6.17119319,-5.40454595),(-30.55210133,-6.15183880,-5.60367838),(-30.55276674,-6.13339480,-5.80537731),(-30.55583722,-6.12007678,-6.00955083),(-30.56701728,-6.11605649,-6.22299119),(-30.58435273,-6.12072742,-6.40412441),(-30.60792237,-6.13103967,-6.57871587),(-30.65867526,-6.15600998,-6.85346587),(-30.72374946,-6.18454217,-7.14590543),(-30.77558215,-6.19358389,-7.42403238),(-30.78978168,-6.18567527,-7.55236431),(-30.79492489,-6.16037199,-7.71850466),(-30.77164779,-6.08554075,-7.99033674),(-30.72138690,-5.99260401,-8.22633289),(-30.59741161,-5.81793280,-8.58892522),(-30.53791610,-5.74702919,-8.73449392),(-30.48942939,-5.69433378,-8.85032477),(-30.39933697,-5.60987352,-9.06689552),(-30.32399069,-5.55513759,-9.24558506),(-30.23309259,-5.50984215,-9.45151997),(-30.14510717,-5.48557752,-9.63708912),(-30.08201645,-5.47677099,-9.76148367),(-29.95997160,-5.47259413,-9.98225448),(-29.82557530,-5.47835224,-10.19763579),(-29.63928374,-5.49013019,-10.46408389),(-29.46616704,-5.49459483,-10.69484414),(-29.21603879,-5.47683727,-11.01702387),(-29.03189864,-5.44788867,-11.24399321),(-28.91493535,-5.42465329,-11.38207082),(-28.73933960,-5.38538422,-11.57905268),(-28.53628100,-5.33963019,-11.78983160),(-28.00631489,-5.27017924,-12.24748243),(-27.78550193,-5.27353054,-12.40129325),(-27.53903797,-5.29645121,-12.55469901),(-27.38525047,-5.31956113,-12.64280861),(-26.97716435,-5.40877870,-12.85582041),(-26.65299861,-5.49850076,-13.00750143),(-26.36606890,-5.57974787,-13.12993916),(-26.16856938,-5.63183653,-13.20817556),(-25.96311523,-5.68141345,-13.28412074),(-25.77397034,-5.72311933,-13.34869214),(-25.57854408,-5.76247779,-13.40963358),(-25.40843926,-5.79405031,-13.45759821),(-25.18039345,-5.83489106,-13.51373302),(-24.95197959,-5.87749637,-13.55950789),(-24.69600313,-5.93136164,-13.59669499),(-24.38555018,-6.00603118,-13.61738609),(-24.10936640,-6.07889282,-13.60773922),(-23.75206150,-6.17948741,-13.54895698),(-23.59259430,-6.22647458,-13.50580017),(-23.37952492,-6.29121916,-13.43193118),(-23.16558705,-6.35822600,-13.33906837),(-23.01435211,-6.40604660,-13.26244231),(-22.75317006,-6.48720577,-13.10993024),(-22.37889921,-6.59213333,-12.84907800),(-22.30793606,-6.60919287,-12.79344839),(-22.11135346,-6.64910246,-12.62734165),(-21.90614233,-6.67727134,-12.43280308),(-21.77440194,-6.68871898,-12.29514265),(-21.67125561,-6.69459903,-12.17959463),(-21.56098791,-6.69840277,-12.04772749),(-21.24582231,-6.69613767,-11.61391095),(-20.93255957,-6.63508346,-11.07347427),(-20.73826455,-6.52529558,-10.66432223),(-20.65370496,-6.46576234,-10.47531841),(-20.44756717,-6.34813799,-10.03591933),(-20.34740776,-6.32082718,-9.84711322),(-20.21952868,-6.30793038,-9.62398977),(-20.14467386,-6.30690210,-9.49837260),(-19.97100479,-6.31110148,-9.21032742),(-19.80295814,-6.30888433,-8.92198537),(-19.59200429,-6.28035599,-8.52384457),(-19.38387944,-6.21007908,-8.05428942),(-19.30058921,-6.16134243,-7.82240973),(-19.26398388,-6.13325094,-7.70517680),(-19.16966359,-6.02011667,-7.30492155))
# gpts = Points(pts, r=10)
#
# # Create a spline where the final points are more dense (easing)
# # line = KSpline(pts, easing="OutCubic", res=100, continuity = -1)
# line = KSpline(pts, res=100, continuity = -1)
# # vpts = line.clone().pointSize(3).shift(0,0.1,0) # a dotted copy
#
# # Calculate positions as a fraction of the length of the line,
# # being x=0 the first point and x=1 the last point.
# # This corresponds to an imaginary point that travels along the line
# # at constant speed:
# # equi_pts = Points([line.eval(x) for x in np.arange(0,1, 0.1)]).c('blue')
#
# # redpt = Point(r=25).c('red')
# # plt = show(mesh, line, gpts)
# # Animation
# # for i in range(line.N()):
# #     x = line.points(i)
# #     redpt.pos(x) # assign the new position
# #     plt.render()
# # plt.interactive().close()
# scut = mesh.clone().cutWithPointLoop(gpts, invert=False)
# scut.c('blue',0.7).lw(0).scale(1.03)
#
# show(mesh, gpts, scut)


"""Select cells inside a point loop"""
# from vedo import *
#
# mesh = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\m202007270042_l.obj"]).lw(0.1)
#
# pts = ((-19.13256897,-5.91439223,-6.99503239),(-19.13325685,-5.76441226,-6.61276362),(-19.16129031,-5.65433201,-6.35131830),(-19.19294016,-5.57662412,-6.16974337),(-19.23358267,-5.50011899,-5.98998689),(-19.28344016,-5.42483095,-5.80903083),(-19.34688681,-5.34709447,-5.61373299),(-19.41021023,-5.28353941,-5.44303078),(-19.48537385,-5.22113829,-5.26196995),(-19.60401997,-5.13248023,-5.01820895),(-19.68997395,-5.06464363,-4.87147793),(-19.81642930,-4.95148257,-4.69485835),(-19.92576535,-4.84416763,-4.57130998),(-20.02860512,-4.73819119,-4.47484564),(-20.09555435,-4.66743374,-4.42109680),(-20.22022166,-4.53339206,-4.33840520),(-20.46547470,-4.26614064,-4.22788447),(-20.94129993,-3.75548725,-4.06844757),(-21.37233925,-3.34675384,-3.86342120),(-21.57190818,-3.19945034,-3.76004430),(-21.85449791,-3.05014516,-3.62035598),(-22.31123924,-2.95198345,-3.42088389),(-22.77307701,-2.97971249,-3.20667076),(-23.01831262,-3.03538001,-3.06474545),(-23.27256390,-3.12913634,-2.87942300),(-23.57773209,-3.36842823,-2.58472800),(-23.71359253,-3.65002608,-2.39143777),(-23.76583744,-3.85129254,-2.28562936),(-23.80313044,-4.01462441,-2.20031469),(-23.83292482,-4.13025715,-2.13420975),(-23.87993620,-4.26585858,-2.04235081),(-23.97739792,-4.42612267,-1.90734398),(-24.21347897,-4.57157317,-1.76558122),(-24.53927946,-4.61806338,-1.73187221),(-24.77500127,-4.62065231,-1.74143759),(-24.95488462,-4.61597963,-1.75524094),(-25.23613068,-4.60666625,-1.77677889),(-25.64078550,-4.60277379,-1.80175094),(-26.00615421,-4.62314470,-1.82516808),(-26.34819367,-4.67490152,-1.85599314),(-26.72326616,-4.76191062,-1.90301773),(-27.11373959,-4.86673906,-1.96633672),(-27.51581036,-4.96866017,-2.04671941),(-27.93176713,-5.06320620,-2.15075069),(-28.34211324,-5.16103513,-2.28503442),(-28.60411403,-5.23437724,-2.39367677),(-28.79568222,-5.29663000,-2.48700850),(-28.99462252,-5.37150368,-2.59852304),(-29.18223301,-5.45465042,-2.72005954),(-29.35438380,-5.54463012,-2.84900756),(-29.55503100,-5.66512890,-3.02629191),(-29.74649999,-5.79116883,-3.23116350),(-29.88498987,-5.88492121,-3.40809598),(-30.00831523,-5.96778559,-3.59143402),(-30.19739367,-6.08688740,-3.93576142),(-30.32063375,-6.15220977,-4.22249225),(-30.38239740,-6.17867417,-4.39894730),(-30.45016992,-6.19909569,-4.64104266),(-30.49341144,-6.20300390,-4.85069372),(-30.53797874,-6.18767269,-5.20798705),(-30.54869093,-6.17119319,-5.40454595),(-30.55210133,-6.15183880,-5.60367838),(-30.55276674,-6.13339480,-5.80537731),(-30.55583722,-6.12007678,-6.00955083),(-30.56701728,-6.11605649,-6.22299119),(-30.58435273,-6.12072742,-6.40412441),(-30.60792237,-6.13103967,-6.57871587),(-30.65867526,-6.15600998,-6.85346587),(-30.72374946,-6.18454217,-7.14590543),(-30.77558215,-6.19358389,-7.42403238),(-30.78978168,-6.18567527,-7.55236431),(-30.79492489,-6.16037199,-7.71850466),(-30.77164779,-6.08554075,-7.99033674),(-30.72138690,-5.99260401,-8.22633289),(-30.59741161,-5.81793280,-8.58892522),(-30.53791610,-5.74702919,-8.73449392),(-30.48942939,-5.69433378,-8.85032477),(-30.39933697,-5.60987352,-9.06689552),(-30.32399069,-5.55513759,-9.24558506),(-30.23309259,-5.50984215,-9.45151997),(-30.14510717,-5.48557752,-9.63708912),(-30.08201645,-5.47677099,-9.76148367),(-29.95997160,-5.47259413,-9.98225448),(-29.82557530,-5.47835224,-10.19763579),(-29.63928374,-5.49013019,-10.46408389),(-29.46616704,-5.49459483,-10.69484414),(-29.21603879,-5.47683727,-11.01702387),(-29.03189864,-5.44788867,-11.24399321),(-28.91493535,-5.42465329,-11.38207082),(-28.73933960,-5.38538422,-11.57905268),(-28.53628100,-5.33963019,-11.78983160),(-28.00631489,-5.27017924,-12.24748243),(-27.78550193,-5.27353054,-12.40129325),(-27.53903797,-5.29645121,-12.55469901),(-27.38525047,-5.31956113,-12.64280861),(-26.97716435,-5.40877870,-12.85582041),(-26.65299861,-5.49850076,-13.00750143),(-26.36606890,-5.57974787,-13.12993916),(-26.16856938,-5.63183653,-13.20817556),(-25.96311523,-5.68141345,-13.28412074),(-25.77397034,-5.72311933,-13.34869214),(-25.57854408,-5.76247779,-13.40963358),(-25.40843926,-5.79405031,-13.45759821),(-25.18039345,-5.83489106,-13.51373302),(-24.95197959,-5.87749637,-13.55950789),(-24.69600313,-5.93136164,-13.59669499),(-24.38555018,-6.00603118,-13.61738609),(-24.10936640,-6.07889282,-13.60773922),(-23.75206150,-6.17948741,-13.54895698),(-23.59259430,-6.22647458,-13.50580017),(-23.37952492,-6.29121916,-13.43193118),(-23.16558705,-6.35822600,-13.33906837),(-23.01435211,-6.40604660,-13.26244231),(-22.75317006,-6.48720577,-13.10993024),(-22.37889921,-6.59213333,-12.84907800),(-22.30793606,-6.60919287,-12.79344839),(-22.11135346,-6.64910246,-12.62734165),(-21.90614233,-6.67727134,-12.43280308),(-21.77440194,-6.68871898,-12.29514265),(-21.67125561,-6.69459903,-12.17959463),(-21.56098791,-6.69840277,-12.04772749),(-21.24582231,-6.69613767,-11.61391095),(-20.93255957,-6.63508346,-11.07347427),(-20.73826455,-6.52529558,-10.66432223),(-20.65370496,-6.46576234,-10.47531841),(-20.44756717,-6.34813799,-10.03591933),(-20.34740776,-6.32082718,-9.84711322),(-20.21952868,-6.30793038,-9.62398977),(-20.14467386,-6.30690210,-9.49837260),(-19.97100479,-6.31110148,-9.21032742),(-19.80295814,-6.30888433,-8.92198537),(-19.59200429,-6.28035599,-8.52384457),(-19.38387944,-6.21007908,-8.05428942),(-19.30058921,-6.16134243,-7.82240973),(-19.26398388,-6.13325094,-7.70517680),(-19.16966359,-6.02011667,-7.30492155))
# N = mesh.NCells()
# print(N)
#
# # Make a copy and cut it
# cmesh = mesh.clone().cutWithPointLoop(pts,
#                                       on='cells',
#                                       includeBoundary=True,
#                                       invert=False,
#                                      )
# tmp = cmesh.faces()
# print(tmp)
# cmesh.lw(0.1).c('tomato')
#
# line = Line(pts, closed=True).lw(5).c('green3')
#
# show([(mesh, line), (cmesh, line,__doc__)], N=2, axes=1)

# mesh = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\m202007270042_l.obj"])
# fine_labels = [0] * mesh.NCells()
# mesh.addCellArray(fine_labels, 'Label')
# write(mesh, 'test.vtp'.format('.vtp'))

# mesh = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\m202007270042_l.obj"])
# # labels = mesh.getCellArray('Label').astype('int32').reshape(-1, 1)
# N = mesh.NCells()
# points = vtk2numpy(mesh.polydata().GetPoints().GetData())
# ids = vtk2numpy(mesh.polydata().GetPolys().GetData()).reshape((N, -1))[:,1:]
# cells = points[ids].reshape(N, 9).astype(dtype='float32')
# # print(len(labels))
# print(len(ids))
# print(len(cells))
# print(len(points))

# """Select cells inside a point loop"""
# from vedo import *
#
# mesh = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\m202007270042_l.obj"]).lw(0.1)
#
# pts = ((-14.09716872,-5.11945798,2.83353302),(-14.12479853,-5.23689070,2.61846687),(-14.14817209,-5.31493261,2.47736469),(-14.20820050,-5.47119606,2.19250998),(-14.32458621,-5.68141226,1.78255566),(-14.41447309,-5.79600033,1.52693719),(-14.46475760,-5.84740310,1.39761417),(-14.55885762,-5.92497213,1.17325660),(-14.62590899,-5.96893712,1.02287645),(-14.73659914,-6.02582525,0.78518316),(-14.83889714,-6.06833598,0.56759994),(-14.92385791,-6.10422653,0.37748674),(-14.99894710,-6.14164354,0.19402648),(-15.09482918,-6.19261440,-0.05457936),(-15.17530758,-6.22894016,-0.25975070),(-15.19170605,-6.23501202,-0.29996765),(-15.35895598,-6.27844977,-0.68390384),(-15.51465429,-6.30425684,-1.01293499),(-15.59034953,-6.31689059,-1.16910973),(-15.73089793,-6.34924364,-1.46561712),(-15.89118813,-6.40769507,-1.82663520),(-15.97134794,-6.43537925,-2.00541278),(-16.06087250,-6.45622302,-2.19367609),(-16.17096023,-6.46582279,-2.40490644),(-16.28872058,-6.45928119,-2.60619926),(-16.40012035,-6.44002662,-2.77492384),(-16.57611623,-6.39196912,-3.00690364),(-16.77308629,-6.32244056,-3.22688112),(-16.95854346,-6.24769688,-3.40361088),(-17.17431468,-6.15319437,-3.57943153),(-17.37625847,-6.06009551,-3.71966505),(-17.63712492,-5.93816937,-3.87171768),(-17.81113861,-5.85841378,-3.95756452),(-17.96970409,-5.78761750,-4.02605564),(-18.24986490,-5.66463150,-4.12471705),(-18.53135814,-5.54027872,-4.19516180),(-18.74021555,-5.44528157,-4.23167497),(-18.84604616,-5.39569620,-4.24624179),(-19.02433974,-5.30929143,-4.26648738),(-19.27809759,-5.17999495,-4.29567864),(-19.52691852,-5.04637221,-4.34093236),(-19.78636323,-4.89397685,-4.40011650),(-20.03275140,-4.71971322,-4.42626822),(-20.09555435,-4.66743374,-4.42109680),(-20.22022166,-4.53339206,-4.33840520),(-20.46547470,-4.26614064,-4.22788447),(-20.94129993,-3.75548725,-4.06844757),(-21.37233925,-3.34675384,-3.86342120),(-21.57190818,-3.19945034,-3.76004430),(-21.85449791,-3.05014516,-3.62035598),(-22.31123924,-2.95198345,-3.42088389),(-22.77307701,-2.97971249,-3.20667076),(-23.01831262,-3.03538001,-3.06474545),(-23.27256390,-3.12913634,-2.87942300),(-23.57773209,-3.36842823,-2.58472800),(-23.71359253,-3.65002608,-2.39143777),(-23.76583744,-3.85129254,-2.28562936),(-23.80313044,-4.01462441,-2.20031469),(-23.83292482,-4.13025715,-2.13420975),(-23.87993620,-4.26585858,-2.04235081),(-23.97739792,-4.42612267,-1.90734398),(-24.02932355,-4.48642208,-1.75762391),(-24.08112688,-4.51556821,-1.59869396),(-24.16476770,-4.53817070,-1.40946277),(-24.33876901,-4.58079801,-1.17252958),(-24.43558636,-4.60476212,-1.06110807),(-24.51672762,-4.62486187,-0.96347741),(-24.73833273,-4.68441638,-0.61994269),(-24.83602659,-4.72122982,-0.43029947),(-24.94340807,-4.77703201,-0.20233139),(-25.01631020,-4.82398047,-0.03384603),(-25.11213706,-4.89522084,0.21006817),(-25.18142268,-4.94769211,0.39991365),(-25.26171881,-4.99599452,0.61783494),(-25.40741101,-5.03010835,0.97451019),(-25.50666555,-5.03311122,1.22042432),(-25.56743995,-5.03585051,1.39587705),(-25.62443461,-5.04483284,1.60244723),(-25.68824945,-5.06259015,1.90508123),(-25.73837727,-5.07527762,2.19547990),(-25.76419505,-5.07755691,2.38774682),(-25.77785448,-5.07342315,2.56896985),(-25.75333050,-5.03743550,2.96252387),(-25.71327478,-5.00628931,3.16424729),(-25.64313275,-4.95849929,3.42225216),(-25.58442501,-4.91891961,3.61809013),(-25.53985885,-4.88634849,3.77656454),(-25.49302738,-4.84734044,3.96904340),(-25.42947401,-4.79752412,4.21250036),(-25.36473982,-4.75971649,4.38831751),(-25.28826049,-4.72560259,4.54970403),(-25.20047366,-4.69615166,4.71990042),(-25.05306071,-4.67426128,5.04418731),(-24.99896616,-4.67502207,5.19321684),(-24.94656095,-4.67800456,5.36494588),(-24.89078866,-4.67890130,5.57914441),(-24.82562831,-4.67134660,5.79508235),(-24.69900923,-4.64099524,6.04709941),(-24.58439704,-4.60676310,6.20053397),(-24.40286006,-4.54311797,6.41844893),(-24.25308581,-4.48096142,6.61268965),(-24.13531332,-4.43021846,6.76898421),(-23.95886072,-4.36177450,6.98437693),(-23.76127636,-4.29462787,7.20106394),(-23.58654838,-4.23008957,7.40008455),(-23.41515378,-4.15033451,7.62057682),(-23.27086311,-4.07564084,7.79347237),(-23.12204565,-4.00120640,7.92820165),(-22.98631862,-3.93776831,8.01457507),(-22.78591199,-3.84826333,8.10293162),(-22.56639294,-3.75265447,8.16510967),(-22.39536807,-3.67925770,8.19521584),(-22.15629368,-3.57945073,8.21489669),(-21.81115387,-3.44349547,8.20646386),(-21.39325976,-3.28361350,8.17963096),(-21.17092204,-3.19486645,8.18068368),(-20.90399568,-3.08806688,8.20300561),(-20.79079163,-3.04476743,8.21859586),(-20.23040982,-2.86610343,8.33652023),(-20.03667933,-2.81381121,8.39040183),(-19.79610630,-2.74846586,8.46426825),(-19.56194357,-2.67021713,8.52391385),(-19.40020561,-2.59338021,8.53658867),(-19.15476412,-2.39574227,8.44696405),(-19.00977240,-2.20779111,8.30774961),(-18.92433310,-2.06502069,8.19692053),(-18.80831547,-1.82538358,8.02233712),(-18.75113262,-1.68810809,7.92979943),(-18.66388893,-1.46932888,7.79332924),(-18.48941227,-1.09167114,7.58001747),(-18.30309567,-0.82179034,7.42360865),(-17.97515558,-0.55035871,7.22387383),(-17.77307701,-0.46933264,7.12083244),(-17.55186908,-0.45425764,7.01791883),(-17.17055047,-0.59990990,6.86622390),(-16.78687457,-0.88353081,6.76991693),(-16.57307625,-1.06933117,6.74888420),(-16.36767401,-1.26435926,6.74266512),(-16.17188783,-1.46810246,6.73888577),(-15.87351946,-1.85708838,6.73430564),(-15.77307796,-2.06933117,6.76069832),(-15.71593069,-2.25542069,6.80159356),(-15.67184579,-2.44003228,6.83869396),(-15.61948760,-2.65027132,6.84355985),(-15.57307720,-2.78341198,6.79332924),(-15.49642103,-2.93420795,6.63502158),(-15.47853428,-2.96125525,6.58801653),(-15.40799345,-3.04443524,6.40372150),(-15.34787919,-3.09551666,6.27779509),(-15.31626796,-3.11848157,6.22451539),(-15.16156181,-3.21421616,6.01471055),(-15.10841255,-3.24384231,5.94678503),(-14.99782579,-3.30418662,5.79319270),(-14.83427444,-3.40633974,5.52064849),(-14.75709988,-3.47242696,5.36376282),(-14.69166066,-3.54243820,5.21901714),(-14.60376892,-3.65580123,5.02592396),(-14.50186635,-3.80613170,4.82481714),(-14.43880790,-3.90646979,4.70615341),(-14.33169178,-4.08763364,4.49729859),(-14.23017066,-4.27739344,4.26506968),(-14.19672564,-4.34786290,4.17181029),(-14.12967038,-4.51927375,3.92040463),(-14.09773606,-4.63586191,3.72899782),(-14.07723712,-4.76080700,3.50813016),(-14.07203891,-4.83500679,3.37107729),(-14.07358803,-4.94267833,3.16764605))
#
# # Make a copy and cut it
# cmesh = mesh.clone().cutWithPointLoop(pts,
#                                       on='cells',
#                                       includeBoundary=False,
#                                       invert=False,
#                                      )
# tmp = cmesh.faces()
# print(tmp)
# cmesh.lw(0.1).c('tomato')
#
# line = Line(pts, closed=True).lw(5).c('green3')
#
# show([(mesh, line), (cmesh, line,__doc__)], N=2, axes=1)


# mesh = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\test\\m202007270042_l.obj"])
# output_path = "C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\test"
# # labels = mesh.getCellArray('Label').astype('int32')
# N = mesh.NCells()
# points = vtk2numpy(mesh.polydata().GetPoints().GetData())
# ids = vtk2numpy(mesh.polydata().GetPolys().GetData()).reshape((N, -1))[:,1:]
# cells = points[ids].reshape(N, 9).astype(dtype='float32')
# print(N)
# print(points[:9])
# print(ids[:10])
# print(cells[:3])
# write(mesh, os.path.join(output_path, '{}_d_predicted.vtp'.format(".vtp")))

# mesh1 = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\test\\.vtp_d_predicted.vtp"])
# mesh2 = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\test\\new.vtp"])
# labels1 = mesh1.getCellArray('Label')
# labels2 = mesh2.getCellArray('Label').astype('int32')
#
# if labels1:
#     print("1 yes")
#     memo = {}
#     for item in labels1:
#         if item not in memo:
#             memo[item] = 0
#         else:
#             memo[item] += 1
#     print(memo)
# if True:
#     print("2 yes")
#     memo = {}
#     for item in labels2:
#         if item not in memo:
#             memo[item] = 0
#         else:
#             memo[item] += 1
#     print(memo)


# mesh = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\test\\m202007270042_l.obj"])
# labels = np.zeros([mesh.NCells(), 1], dtype=np.int32)


# src = "C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\test\\m202007270042_l.seg"
# mesh = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\test\\m202007270042_l.obj"])
# # mesh = load(["C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\test\\new.vtp"])
# N = mesh.NCells()
# points = vtk2numpy(mesh.polydata().GetPoints().GetData())
# ids = vtk2numpy(mesh.polydata().GetPolys().GetData()).reshape((N, -1))[:,1:]
# cells = points[ids].reshape(N, 9).astype(dtype='float32')
# print(N)
# print(len(points))
# print(len(ids))
# print(len(cells))
# filea = open(src)
# tmp = []
# for line in filea:
#     a = line.strip()
#     tmp.append(int(a))
# # print(tmp)
# print(len(tmp))
# labels = np.zeros([len(cells), 1], dtype=np.int32)
#
# for i in range(len(cells)):
#     labels[i] =tmp[i+214062]
#
# mesh.addCellArray(labels, 'Label')
#
# write(mesh, "C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\test\\new_test.vtp")

# mesh = load(["C:\\dev\\MeshSegNet\\src\\Sample_015_d.vtp"])
# labels = mesh.getCellArray('Label').astype('int32')
# memo = {}
# for item in labels:
#     if item not in memo:
#         memo[item] = 0
#     else:
#         memo[item] += 1
# print(memo)

# mesh = load(["C:\\dev\\MeshSegNet\\outputs\\test\\l_201911070015_new_predicted_refined_n.vtp"])
# labels = mesh.getCellArray('Label').astype('int32')
# memo = {}
# for item in labels:
#     if item not in memo:
#         memo[item] = 0
#     else:
#         memo[item] += 1
# print(memo)





# src = "C:\\Users\\xuzih\\AppData\\Roaming\\ClearBos\\202007270042\\test\\m202007270042_l.seg"
#
# filea = open(src)
# tmp = []
# for line in filea:
#     a = line.strip()
#     tmp.append(int(a))
#
# memo = {}
# for item in tmp[214062:214062+71354]:
#     if item not in memo:
#         memo[item] = 0
#     else:
#         memo[item] += 1
# print(memo)


# mesh = load("C:\\Users\\xuzih\\Desktop\\pre_train\\test2\\Sample_050_d.vtp")
# mesh = load("C:\\Users\\xuzih\\Desktop\\vtp_data_3\\l\\202204190035_l.vtp")
# mesh = load("C:\\Users\\xuzih\\Desktop\\vtp_data\\智齿\\202204180085_l.vtp")
# mesh = load("C:\\dev\\MeshSegNet\\src\\Sample_071_d.vtp")
# mesh = load("C:\\dev\\MeshSegNet\\augmentation_vtk_data\\A7_Sample_01020_d.vtp")
# labels = mesh.getCellArray('Label').astype('int32').reshape(-1, 1)
#
# # move mesh to origin
# N = mesh.NCells()
# points = vtk2numpy(mesh.polydata().GetPoints().GetData())
# ids = vtk2numpy(mesh.polydata().GetPolys().GetData()).reshape((N, -1))[:,1:]
# cells = points[ids].reshape(N, 9).astype(dtype='float32')
#
# mean_cell_centers = mesh.centerOfMass()
# cells[:, 0:3] -= mean_cell_centers[0:3]
# cells[:, 3:6] -= mean_cell_centers[0:3]
# cells[:, 6:9] -= mean_cell_centers[0:3]
#
# # customized normal calculation; the vtk/vedo build-in function will change number of points
# v1 = np.zeros([mesh.NCells(), 3], dtype='float32')
# v2 = np.zeros([mesh.NCells(), 3], dtype='float32')
# v1[:, 0] = cells[:, 0] - cells[:, 3]
# v1[:, 1] = cells[:, 1] - cells[:, 4]
# v1[:, 2] = cells[:, 2] - cells[:, 5]
# v2[:, 0] = cells[:, 3] - cells[:, 6]
# v2[:, 1] = cells[:, 4] - cells[:, 7]
# v2[:, 2] = cells[:, 5] - cells[:, 8]
# mesh_normals = np.cross(v1, v2)
# mesh_normal_length = np.linalg.norm(mesh_normals, axis=1)
# mesh_normals[:, 0] /= mesh_normal_length[:]
# mesh_normals[:, 1] /= mesh_normal_length[:]
# mesh_normals[:, 2] /= mesh_normal_length[:]
#
# print(mesh_normals)

filepath = "C:\\dev\\MeshSegNet\\augmentation_vtk_data"
# filepath = "C:\\Users\\xuzih\\Desktop\\pre_train\\17class_104sample_downsample"
# filepath = "C:\\dev\\MeshSegNet\\src"

tmplist = os.listdir(filepath)
namelist = []
for item in tmplist:
    namelist.append(item)

for name in namelist:
    objpath = os.path.join(filepath, name)
    mesh = load(objpath)

    labels = mesh.getCellArray('Label').astype('int32').reshape(-1, 1)

    # move mesh to origin
    N = mesh.NCells()
    points = vtk2numpy(mesh.polydata().GetPoints().GetData())
    ids = vtk2numpy(mesh.polydata().GetPolys().GetData()).reshape((N, -1))[:,1:]
    cells = points[ids].reshape(N, 9).astype(dtype='float32')

    mean_cell_centers = mesh.centerOfMass()
    cells[:, 0:3] -= mean_cell_centers[0:3]
    cells[:, 3:6] -= mean_cell_centers[0:3]
    cells[:, 6:9] -= mean_cell_centers[0:3]

    # customized normal calculation; the vtk/vedo build-in function will change number of points
    v1 = np.zeros([mesh.NCells(), 3], dtype='float32')
    v2 = np.zeros([mesh.NCells(), 3], dtype='float32')
    v1[:, 0] = cells[:, 0] - cells[:, 3]
    v1[:, 1] = cells[:, 1] - cells[:, 4]
    v1[:, 2] = cells[:, 2] - cells[:, 5]
    v2[:, 0] = cells[:, 3] - cells[:, 6]
    v2[:, 1] = cells[:, 4] - cells[:, 7]
    v2[:, 2] = cells[:, 5] - cells[:, 8]
    mesh_normals = np.cross(v1, v2)
    mesh_normal_length = np.linalg.norm(mesh_normals, axis=1)
    mesh_normals[:, 0] /= mesh_normal_length[:]
    mesh_normals[:, 1] /= mesh_normal_length[:]
    mesh_normals[:, 2] /= mesh_normal_length[:]

    print(name)
    print(mesh_normals)
    print('~~~~~~~~~~~~~~~~~~~~~~~~~')

# for i in range(20):
#     mesh = load("C:\\dev\\MeshSegNet\\augmentation_vtk_data\\A{0}_Sample_098_d.vtp".format(i))
#     # labels = mesh.getCellArray('Label').astype('int32').reshape(-1, 1)
#
#     # move mesh to origin
#     N = mesh.NCells()
#     points = vtk2numpy(mesh.polydata().GetPoints().GetData())
#     ids = vtk2numpy(mesh.polydata().GetPolys().GetData()).reshape((N, -1))[:, 1:]
#     cells = points[ids].reshape(N, 9).astype(dtype='float32')
#
#     mean_cell_centers = mesh.centerOfMass()
#     cells[:, 0:3] -= mean_cell_centers[0:3]
#     cells[:, 3:6] -= mean_cell_centers[0:3]
#     cells[:, 6:9] -= mean_cell_centers[0:3]
#
#     # customized normal calculation; the vtk/vedo build-in function will change number of points
#     v1 = np.zeros([mesh.NCells(), 3], dtype='float32')
#     v2 = np.zeros([mesh.NCells(), 3], dtype='float32')
#     v1[:, 0] = cells[:, 0] - cells[:, 3]
#     v1[:, 1] = cells[:, 1] - cells[:, 4]
#     v1[:, 2] = cells[:, 2] - cells[:, 5]
#     v2[:, 0] = cells[:, 3] - cells[:, 6]
#     v2[:, 1] = cells[:, 4] - cells[:, 7]
#     v2[:, 2] = cells[:, 5] - cells[:, 8]
#     mesh_normals = np.cross(v1, v2)
#     mesh_normal_length = np.linalg.norm(mesh_normals, axis=1)
#     mesh_normals[:, 0] /= mesh_normal_length[:]
#     mesh_normals[:, 1] /= mesh_normal_length[:]
#     mesh_normals[:, 2] /= mesh_normal_length[:]
#
#     print(i)
#     print(mesh_normals)
#     print("------------------------")